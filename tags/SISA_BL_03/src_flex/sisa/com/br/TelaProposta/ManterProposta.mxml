<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="706" height="604" 
	title="Manter Proposta" creationComplete="iniciarTela()" verticalAlign="middle" 
	horizontalAlign="center" showCloseButton="true" close="titleWindow_close(event)">

	<mx:Metadata>
    	[ResourceBundle("MessagemResource_pt_BR")] //Nome do arquivo .properties
    </mx:Metadata>
    
	<mx:Script>
		<![CDATA[
			import sisa.com.br.entidade.Financiamento;
			import mx.controls.Image;
			import sisa.com.br.dominio.objDominio;
			import sisa.com.br.entidade.ParcelaSinal;
			import sisa.com.br.TelaPromitente.SelecionarPromitente;
			import mx.core.UIComponent;
			import sisa.com.br.TelaPromitente.MantemPromitente;
			import sisa.com.br.componentes.Utils;
			import sisa.com.br.entidade.Endereco;
			import sisa.com.br.entidade.Promitente;
			import sisa.com.br.entidade.VendedorSisa;
			import sisa.com.br.entidade.Proposta;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import sisa.com.br.entidade.LoteamentoSisa;
			import mx.rpc.events.FaultEvent;
			import mx.managers.PopUpManager;
			import sisa.com.br.TelaLote.SelecionarLote;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import sisa.com.br.entidade.LoteSisa;
			import mx.controls.dataGridClasses.DataGridColumn;
	
		[Bindable]
		private var listaTipoPagto: ArrayCollection;
		[Bindable]
		private var listaLoteamento: ArrayCollection;
		[Bindable]
		private var listaLotesProposta: ArrayCollection;
		[Bindable]
		private var listaParcelasSinal: ArrayCollection;
		[Bindable]
		private var listaFinanciamento: ArrayCollection;
		[Bindable]
		private var listaVendedor: ArrayCollection;
		
		private var popupLote:SelecionarLote;
		private var popupCadPromitente: MantemPromitente;
		private var popupSelPromitente: SelecionarPromitente;
		private var popupEditParcelaSinal: ManterParcelaSinal;
		//usada para verificar se está salvando ou cancelando ao fechar a tela
		private var salvarProposta: Boolean = false;
		private var promitente: Promitente;
		private var valorSinal: Number;
		
		private var proposta: Proposta;
		
		public var acao: String = "I";
		public var propostaEditar: Proposta;
				
		//Inicia a tela
		private function iniciarTela():void
		{
			loteamentoService.getList();
			dominioService.listarTipoPagto();
			vendedorService.getList();
			financiamentoService.getList();
			
			if (acao == "I")
			{
				proposta = new Proposta();
			}
			else
			{
				proposta = propostaEditar
			}
		}
	
		//Fecha a tela
		public function fechar():void
		{
			//verifica se não está salvando a proposta
			//Se não estiver volta as situações do(s) lote(s) para Livre (L)
			if (!salvarProposta)
			{
				for each(var lote: LoteSisa in listaLotesProposta)
				{
					if (lote.situacao == "E")
					{
						lote.situacao = "L";						
						loteService.update(lote);
					}
				}
			}
			PopUpManager.removePopUp(this);
			
		}
		
		//consulta o promitente
		private function consultarPromitente(): void
		{
			//Se digita o código busca no serviço o promitente
			if (txCodigoPromitente.text != "")
			{
				promitenteService.findById(txCodigoPromitente.text);
			}
			else  //caso não digita o código abre-se uma tela de pesquisa para selecionar o promintente
			{
				popupSelPromitente = SelecionarPromitente(PopUpManager.createPopUp(this, SelecionarPromitente, true));
				
				popupSelPromitente.addEventListener(SelecionarPromitente.OK, popupSelPromitente_OK);
			}
		}
	
		//Chama a tela de selecionar lote
		private function adicionarLote():void
		{
			popupLote = SelecionarLote( PopUpManager.createPopUp(this, SelecionarLote, true));
			//Fica aguardando o evento, caso clique ok na tela de selecionar lote
			popupLote.addEventListener(SelecionarLote.OK, popupLote_OK);
			//Caso o loteamento tenha sido selecionado, passa ele para o filtro de selecionar lote
			if (cbLoteamento.selectedIndex > 0)
			{
				popupLote.loteamento = cbLoteamento.selectedItem as LoteamentoSisa;
			}
		}
		
		//Remove um lote da lista
		private function removerLote(): void
		{
			var lote: LoteSisa = grLotes.selectedItem as LoteSisa;
			
			listaLotesProposta.removeItemAt(grLotes.selectedIndex);
			
			calcularTotal();
			
			calcularSaldo();
			parcelarSinal();
			calcularValorPrestacao();
			
			pnPlanoPagto.enabled = (listaLotesProposta.length != 0);
			
			//Muda a situação do lote para livre (L)
			lote.situacao = "L";			
			loteService.update(lote);
		}
		
		//calcula o valor total do(s) lote(s) e o valor do sinal sugerido (10%)
		private function calcularTotal(): void
		{
			try
			{
				var total: Number = 0.00;
				for each(var lote: LoteSisa in listaLotesProposta)
				{
					total = total + lote.nu_area * lote.valorm2;
				}
				txValorTotal.text = nf.format(total);
				//propões o sinal como 10% (valor minimo) do valor total 
				var sinal: Number = total * 0.10;
				txSinal.text = nf.format(sinal);
			}
			catch (e: Error)
			{
				Alert.show(e.message);
			}
		}
		
		private function focusSinal(): void
		{
			valorSinal = parseFloat(txSinal.text.replace(".", "").replace(",","."));
		}
		
		private function validarSinal(evt: Event): void
		{
			if (txSinal.text != "")
			{
				var total: Number = parseFloat(txValorTotal.text.replace(".", "").replace(",","."));
				var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
				
				if ((sinal / total) < 0.1)
				{
					Alert.show("Valor do Sinal não deve ser inferior a 10% do Valor Total!", "Atenção");
					txSinal.text = nf.format(valorSinal);
				}
				else
				{
					if (sinal != valorSinal)
					{
						calcularSaldo();
						parcelarSinal();
						calcularValorPrestacao();
					}
					txSinal.text = nf.format(sinal);
				}
			}
		}
		
		//Calcula o saldo
		private function calcularSaldo(): void
		{
			var total: Number = parseFloat(txValorTotal.text.replace(".", "").replace(",","."));
			var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
			
			txSaldo.text = nf.format(total - sinal);
		}
		
		//Salva a proposta
		private function salvar(): void
		{
			salvarProposta = true;
			
			//Se for inclusão cria uma nova proposta
			if (acao == "I")
			{
				proposta.numero = txNumero.text;
				proposta.situacao = "P";
				proposta.loteamento = cbLoteamento.selectedItem as LoteamentoSisa;
				proposta.vendedor = cbVendedor.selectedItem as VendedorSisa;
				proposta.promitente = promitente;
				proposta.lotes = listaLotesProposta;
				proposta.parcelasSinal = listaParcelasSinal;
								
				proposta.lotes = listaLotesProposta;
				
				//insere a proposta
				propostaService.insert(proposta);
			}
			else
			{
				//altera a proposta
				propostaService.update(proposta);
			}
			//fecha a tela
			fechar();
		}
		
		//função de retorno da tela de Selecionar Lote
        private function popupLote_OK(e:Event):void{
        	//Se é o primeiro lote cria a lista de lotes 
        	if (listaLotesProposta == null)
        	{
        		listaLotesProposta = new ArrayCollection();
        	}
            listaLotesProposta.addItem(popupLote.lote);
            calcularTotal();
            calcularSaldo();
            parcelarSinal();
            calcularValorPrestacao();
            
            pnPlanoPagto.enabled = (listaLotesProposta.length != 0);
            
            //Alterar a situção do lote para Em reserva (E)
            popupLote.lote.situacao = "E";
            loteService.update(popupLote.lote);
            
            PopUpManager.removePopUp(popupLote);
        }
        
		//labelFunction para formatar Área
		private function formatarArea(item: Object, column:DataGridColumn): String
		{
			var lote: LoteSisa = item as LoteSisa;
			return nf.format(lote.nu_area);
		}
		
		//labelFunction para formatar valor
		private function formatarValor(item: Object, column:DataGridColumn): String
		{
			//var lote: LoteSisa = item as LoteSisa;
			return nf.format(item[column.dataField]);
		}	
		//LabelFunction que calcula o valor do lote	
		private function calcularValor(item: Object, column:DataGridColumn): String
		{
			var lote: LoteSisa = item as LoteSisa;
			return nf.format(lote.nu_area * lote.valorm2);
		}
		
		private function formatarData(item: Object, column:DataGridColumn): String
		{
			return df.format(item[column.dataField]);
		}
		
		private function formatarTipoPagto(item: Object, column:DataGridColumn): String
		{
			var descricao: String = "";
			for each(var tipo: objDominio in listaTipoPagto)
			{
				if (tipo.codigo == item[column.dataField])
				{
					descricao = tipo.descricao;
					break;
				}
			}
			return descricao;
		}
		
		//método de retorno do serviço de Tipo de Pagto
		private function onResultListaTipoPagto(e: ResultEvent): void
		{
			listaTipoPagto = e.result as ArrayCollection;
		}
		
		//método de retorno do serviço de Loteamento
		private function onResultListaLoteamento(e: ResultEvent): void
		{
			listaLoteamento = e.result as ArrayCollection;
			var loteamento: LoteamentoSisa = new LoteamentoSisa();
			loteamento.ds_lotm = "{Selecione o Loteamento}";
			loteamento.nu_lotm = "0";
			listaLoteamento.addItemAt(loteamento, 0);
			cbLoteamento.selectedIndex = 0;
		}
		
		//Limpa os dados do promitente
		private function limparPromitente(): void
		{
			promitente = null;
			txCodigoPromitente.text = "";
			txNomePromitente.text = "";
			txTelefonePromitente.text = "";
			txEnderecoPromitente.text = "";
			txCodigoPromitente.setFocus();
		}
		
		//preenche os dados do promitente
		private function preencherPromitente(prom: Promitente): void
		{
			txCodigoPromitente.text = prom.codigo;
			txNomePromitente.text = prom.nome;
			txTelefonePromitente.text = prom.telefoneCobranca;
			var endereco: String;
			
			endereco = prom.enderecoCobranca.logradouro;
			if (prom.enderecoCobranca.numero != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.numero;
			}
			if (prom.enderecoCobranca.complemento != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.complemento;
			}
			if (prom.enderecoCobranca.bairro != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.bairro;
			}
			if (prom.enderecoCobranca.cidade != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.cidade;
				if (prom.enderecoCobranca.uf != null)
				{
					endereco = endereco + " - " + prom.enderecoCobranca.uf;
				}
			}
			txEnderecoPromitente.text = endereco;
			
		}

		//método de retorno do serviço de Promitente
		private function onResultConsultaPromitente(e: ResultEvent): void
		{
			if (e.result != null)
			{
				promitente = e.result as Promitente;
				
				preencherPromitente(promitente);
			}
			else
			{
				Alert.show("Promitente não cadastrado! Deseja cadastrar um novo?", "Confirmação"
			           ,Alert.YES| Alert.NO
			           ,null
			           ,handleAlert
			           ,null
			           ,Alert.YES);
			}
		}
		
		//evento ao fechar do Alert
		private function handleAlert(e: CloseEvent): void
		{
			if (e.detail == Alert.YES)
			{
				cadastrarPromitente();
			}
		}
		
		//Chama a tela para cadastrar um novo promitente
		private function cadastrarPromitente(): void
		{
        	popupCadPromitente = MantemPromitente(PopUpManager.createPopUp(UIComponent(this.parentApplication), sisa.com.br.TelaPromitente.MantemPromitente, true));
        	
        	popupCadPromitente.addEventListener(MantemPromitente.SALVAR, popupCadPromitente_OK);
        	
        	popupCadPromitente.retornarPromitente = true;
		}
		
		//evento chamado ao clicar em OK na tela de selecionar promitente
		private function popupSelPromitente_OK(e: Event): void
		{
			promitente = popupSelPromitente.promitente;
			
			preencherPromitente(promitente);
			
			PopUpManager.removePopUp(popupSelPromitente);
		}
		
		//evento chamado ao clicar em SALVAR na tela de cadastrar promitente
		private function popupCadPromitente_OK(e: Event): void
		{
			promitente = popupCadPromitente.promitenteEditar;
			
			preencherPromitente(promitente);
			
			PopUpManager.removePopUp(popupCadPromitente);
		}
		
		//funcão chamada no change de cbQtdeParcelasSinal para parcelar o sinal
		private function parcelarSinal(): void
		{
			var qtdParcela: int = parseInt(cbQtdeParcelasSinal.text);
			var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
			var valorParcela: Number = sinal / qtdParcela;
			var dataVenc: Date = new Date();
			
			if (listaParcelasSinal != null)
			{
				listaParcelasSinal = null;
			}
			listaParcelasSinal = new ArrayCollection;
			
			for (var i: int = 1; i <= qtdParcela; i++)
			{
				var parcela: ParcelaSinal = new ParcelaSinal();
				
				parcela.proposta = proposta;
				parcela.parcela = i;
				parcela.tipoPagto = "B";
				parcela.valor = valorParcela;
				parcela.dataVencimento = dataVenc;
				
				listaParcelasSinal.addItem(parcela);
				
				dataVenc = Utils.dateAdd("month", 1, dataVenc);
			}
		}

		//método de retorno do serviço de Financiamento
		private function onResultListaFinanciamento(e: ResultEvent): void
		{
			listaFinanciamento = e.result as ArrayCollection;
		}

		//método de retorno do serviço de Vendedor
		private function onResultListaVendedor(e: ResultEvent): void
		{
			listaVendedor = e.result as ArrayCollection;
		}
		
		//método de retorno do serviço de Proposta
		private function onResultProposta(e: ResultEvent): void
		{
			if (acao == "I")
			{
				Alert.show("Proposta cadastrada com sucesso!");
			}
			else
			{
				Alert.show("Proposta alterada com sucesso!");
			}
		}

		//método de retorno das falhas nos serviços
		private function onFault(event:FaultEvent):void
		{												
			Alert.show(Utils.mensagemErro(event));
		}
		
		
		//chamado ao clicar no icone de fechar a janela
		private function titleWindow_close(evt:CloseEvent):void 
		{
			fechar();
		}
		
		//Editar a parcela do Sinal
		public function editarParcela(): void
		{
			popupEditParcelaSinal = ManterParcelaSinal(PopUpManager.createPopUp(UIComponent(this.parentApplication), sisa.com.br.TelaProposta.ManterParcelaSinal, true));
			
			popupEditParcelaSinal.addEventListener(ManterParcelaSinal.OK, popupEditParcelaSinal_OK);
			
			popupEditParcelaSinal.parcelaSinal = grParcelaSinal.selectedItem as ParcelaSinal;
		}

		//evento chamado ao clicar em OK na tela de editar parcela
		private function popupEditParcelaSinal_OK(e: Event): void
		{
			var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
			var totalParcelas: Number = 0;
			
			for (var i: int = 0; i < listaParcelasSinal.length; i++) 
			{
				if (i != grParcelaSinal.selectedIndex)
				{
					var parcelaSinal: ParcelaSinal = listaParcelasSinal.getItemAt(i) as ParcelaSinal;
					totalParcelas += parcelaSinal.valor;
				}	
			}
			totalParcelas += popupEditParcelaSinal.parcelaSinal;
			
			if (totalParcelas > sinal)
			{
				Alert.show("A soma das parcelas não pode ser maior que o sinal!");
			}
			else
			{
				listaParcelasSinal.setItemAt(popupEditParcelaSinal.parcelaSinal, grParcelaSinal.selectedIndex);
			}
			PopUpManager.removePopUp(popupEditParcelaSinal);
		}
		
		private function calcularValorPrestacao(): void
		{
			var saldo: Number = parseFloat(txSaldo.text.replace(".", "").replace(",","."));
			
			var valorPrestacao: Number = saldo * (cbFinanciamento.selectedItem as Financiamento).percentual;
			
			txValorPrestacao.text = nf.format(valorPrestacao);
		}
		]]>
	</mx:Script>
	<mx:Style>
		.CenterHeader {
			textAlign: center;
		}
		.FormAlign{
			horizontal-align: right;
		}
	</mx:Style>

	<mx:RemoteObject id="propostaService" showBusyCursor="true" fault="onFault(event)" destination="propostaService">
		<mx:method name="insert" result="onResultProposta(event)" fault="onFault(event)"/>
		<mx:method name="update" result="onResultProposta(event)" fault="onFault(event)"/>
		<mx:method name="findById" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="dominioService" showBusyCursor="true" fault="onFault(event)" destination="dominioService">
		<mx:method name="listarTipoPagto" result="onResultListaTipoPagto(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="loteamentoService" showBusyCursor="true" fault="onFault(event)" destination="loteamentoService">
		<mx:method name="getList" result="onResultListaLoteamento(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="promitenteService" showBusyCursor="true" fault="onFault(event)" destination="promitenteService">
		<mx:method name="findById" result="onResultConsultaPromitente(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="loteService" showBusyCursor="true" fault="onFault(event)" destination="loteService">
		<mx:method name="update" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="financiamentoService" showBusyCursor="true" fault="onFault(event)" destination="financiamentoService">
		<mx:method name="getList" result="onResultListaFinanciamento(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="vendedorService" showBusyCursor="true" fault="onFault(event)" destination="vendedorService">
		<mx:method name="getList" result="onResultListaVendedor(event)" fault="onFault(event)"/>
	</mx:RemoteObject>
	
	<mx:NumberFormatter id="nf"  precision="2" decimalSeparatorTo="," thousandsSeparatorTo="." useThousandsSeparator="true" />

	<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
	
	<mx:Form x="0" y="0" width="286" paddingLeft="12" paddingTop="5" verticalGap="2" paddingBottom="5">
		<mx:FormItem label="Número:" horizontalAlign="left" required="true">
			<mx:TextInput width="64" maxChars="5" id="txNumero" height="19"/>
		</mx:FormItem>
		<mx:FormItem label="Loteamento:" horizontalAlign="right" required="true">
			<mx:ComboBox id="cbLoteamento" width="173" height="19" dataProvider="{listaLoteamento}" labelField="ds_lotm"></mx:ComboBox>
		</mx:FormItem>
	</mx:Form>
	<mx:Panel x="10" y="52" width="668" height="101" layout="absolute" title="Promitente" backgroundColor="#EFF5FB" headerHeight="15">
		<mx:Form x="0" y="0" width="100%" alpha="1.0" paddingTop="5" paddingLeft="5" verticalGap="2" paddingBottom="5" paddingRight="5" height="100%">
			<mx:FormItem label="Código:" required="true">
				<mx:TextInput id="txCodigoPromitente" width="80" maxChars="5" height="19"/>
			</mx:FormItem>
			<mx:FormItem label="Nome:" required="true">
				<mx:TextInput width="336" editable="false" enabled="false" height="19" id="txNomePromitente"/>
			</mx:FormItem>
			<mx:FormItem label="Endereço:">
				<mx:TextInput editable="false" enabled="false" width="559" height="19" id="txEnderecoPromitente"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form x="422" y="0" width="224" paddingLeft="5" paddingTop="28" paddingRight="5" paddingBottom="5">
			<mx:FormItem label="Telefone:">
				<mx:TextInput width="141" editable="false" enabled="false" height="19" id="txTelefonePromitente"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Button x="160" y="5" width="27" height="19" id="btConsultarPromitente" click="consultarPromitente()" toolTip="Consultar promitente">
			<mx:icon>@Embed(source='../../../../img/button/search.png')</mx:icon>
		</mx:Button>
		<mx:Button x="191" y="5" width="27" height="19" id="btCadastrarPromitente" toolTip="Cadastrar novo promitente" click="cadastrarPromitente()">
			<mx:icon>@Embed(source='../../../../img/button/add.png')</mx:icon>
		</mx:Button>
		<mx:Button x="222" y="5" width="27" height="19" id="btLimparPromitente" toolTip="Limpar promitente" click="limparPromitente()">
			<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
		</mx:Button>
	</mx:Panel>
	<mx:Panel x="10" y="161" width="666" height="125" layout="absolute" title="Lotes" backgroundColor="#EFF5FB" headerHeight="15">
		<mx:DataGrid x="0" y="0" width="100%" height="62" id="grLotes" editable="false"  headerHeight="20" rowHeight="19" dataProvider="{listaLotesProposta}">
			<mx:columns>
				<mx:DataGridColumn headerText="Quadra" dataField="nu_quadra" headerStyleName="CenterHeader" />
				<mx:DataGridColumn headerText="Lote" dataField="nu_lote" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn headerText="Área (m²)" headerStyleName="CenterHeader" textAlign="right" dataField="nu_area" labelFunction="formatarValor"/>
				<mx:DataGridColumn headerText="Valor do m² (R$)" headerStyleName="CenterHeader" textAlign="right" dataField="valorm2" labelFunction="formatarValor"/>
				<mx:DataGridColumn headerText="Valor (R$)" labelFunction="calcularValor" headerStyleName="CenterHeader" textAlign="right"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Button x="10" y="70" label="Adicionar" icon="@Embed(source='../../../../img/button/add.png')" id="btAddLote" toolTip="Adicionar um lote" click="adicionarLote()"/>
		<mx:Button x="120" y="70" label="Remover" click="removerLote()" id="btRemLote">
			<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
		</mx:Button>
		<mx:Form x="432" y="69" width="214" paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="5" styleName="FormAlign">
			<mx:FormItem label="Valor Total:">
				<mx:TextInput width="112" id="txValorTotal" editable="false" enabled="false" textAlign="right"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Panel>
	<mx:Panel x="10" y="319" width="666" layout="absolute" headerHeight="15" title="Plano de Pagamento" backgroundColor="#EFF5FB" height="192" enabled="false" id="pnPlanoPagto">
		<mx:DataGrid x="0" y="26" width="100%" height="100" id="grParcelaSinal" dataProvider="{listaParcelasSinal}">
			<mx:columns>
				<mx:DataGridColumn headerText="Parcela" dataField="parcela" width="70" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn headerText="Tipo de Pagto." dataField="tipoPagto" labelFunction="formatarTipoPagto" width="120" headerStyleName="CenterHeader" />
				<mx:DataGridColumn headerText="Documento" dataField="numeroDoc" width="100" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn headerText="Valor" dataField="valor" width="100" headerStyleName="CenterHeader" labelFunction="formatarValor"  textAlign="right"/>
				<mx:DataGridColumn headerText="Data de Vencimento" dataField="dataVencimento" labelFunction="formatarData" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn width="30">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Button click="parentDocument.editarParcela()" >
								<mx:icon>@Embed(source='../../../../img/button/alter.png')</mx:icon>
							</mx:Button>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		<mx:Form x="0" y="0" paddingBottom="5" paddingTop="2" paddingLeft="5" paddingRight="5">
			<mx:FormItem label="Parcelamento Sinal:">
				<mx:ComboBox height="19" width="94" id="cbQtdeParcelasSinal" selectedIndex="0" labelField="label" change="parcelarSinal()">
					<mx:dataProvider>
						<mx:ArrayCollection>
							<mx:Object label="1" data="1"/>
							<mx:Object label="2" data="2"/>
							<mx:Object label="3" data="3"/>
							<mx:Object label="4" data="4"/>							
						</mx:ArrayCollection>
					</mx:dataProvider>
				</mx:ComboBox>
			</mx:FormItem>
		</mx:Form>
		<mx:Form x="0" y="131" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<mx:FormItem label="Número de Prestações:">
				<mx:ComboBox width="98" id="cbFinanciamento" dataProvider="{listaFinanciamento}" labelField="qtdeParcelas" height="19" change="calcularValorPrestacao()"></mx:ComboBox>
			</mx:FormItem>
		</mx:Form>
		<mx:Form x="245" y="131" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<mx:FormItem label="Valor das Prestações:">
				<mx:TextInput width="112" editable="false" enabled="false" id="txValorPrestacao" textAlign="right" height="19"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Panel>
	<mx:Form x="230" y="293" paddingBottom="5" paddingTop="0" paddingLeft="12" paddingRight="5" verticalGap="3" autoLayout="false">
		<mx:FormItem label="Sinal:">
			<mx:TextInput width="112" id="txSinal" textAlign="right" height="19" focusIn="focusSinal()" focusOut="validarSinal(event)"/>
		</mx:FormItem>
	</mx:Form>
	<mx:Form x="492" y="293" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0" styleName="FormAlign">
		<mx:FormItem label="Saldo:">
			<mx:TextInput width="112" editable="false" enabled="false" height="19" id="txSaldo" textAlign="right"/>
		</mx:FormItem>
	</mx:Form>
	<mx:Form x="285" y="22" paddingBottom="5" paddingLeft="0" paddingRight="5" paddingTop="5">
		<mx:FormItem label="Vendedor:" required="true">
			<mx:ComboBox id="cbVendedor" dataProvider="{listaVendedor}" labelField="ds_razao_nome" width="318" height="19"></mx:ComboBox>
		</mx:FormItem>
	</mx:Form>
	<mx:Button x="470" y="519" label="Salvar" icon="@Embed(source='../../../../img/button/10.png')" id="btSalvar" toolTip="Adicionar um lote" click="salvar()" width="98" height="24"/>
	<mx:Button x="575" y="519" label="Cancelar" click="fechar()" id="btCancelar" width="98" height="24">
		<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
	</mx:Button>
	<mx:Form x="0" y="293" paddingBottom="5" paddingTop="0" paddingLeft="12" paddingRight="5" verticalGap="3" autoLayout="false">
		<mx:FormItem label="Pagamento a Vista">
			<mx:CheckBox width="29" id="ckPagtoVista"/>
		</mx:FormItem>
	</mx:Form>
	
</mx:TitleWindow>
