<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="730" height="460" 
	title="Manter Proposta" creationComplete="iniciarTela()" verticalAlign="middle" 
	horizontalAlign="center" showCloseButton="true" close="titleWindow_close(event)">

	<mx:Metadata>
    	[ResourceBundle("MessagemResource_pt_BR")] //Nome do arquivo .properties
    </mx:Metadata>
    
	<mx:Script>
		<![CDATA[
			import sisa.com.br.entidade.Financiamento;
			import mx.controls.Image;
			import sisa.com.br.dominio.objDominio;
			import sisa.com.br.entidade.ParcelaSinal;
			import sisa.com.br.TelaPromitente.SelecionarPromitente;
			import mx.core.UIComponent;
			import sisa.com.br.TelaPromitente.MantemPromitente;
			import sisa.com.br.componentes.Utils;
			import sisa.com.br.entidade.Endereco;
			import sisa.com.br.entidade.Promitente;
			import sisa.com.br.entidade.VendedorSisa;
			import sisa.com.br.entidade.Proposta;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import sisa.com.br.entidade.LoteamentoSisa;
			import mx.rpc.events.FaultEvent;
			import mx.managers.PopUpManager;
			import sisa.com.br.TelaLote.SelecionarLote;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import sisa.com.br.entidade.LoteSisa;
			import mx.controls.dataGridClasses.DataGridColumn;
	
		[Bindable]
		private var listaTipoPagto: ArrayCollection;
		[Bindable]
		private var listaLoteamento: ArrayCollection;
		[Bindable]
		private var listaLotesProposta: ArrayCollection;
		[Bindable]
		private var listaParcelasSinal: ArrayCollection;
		[Bindable]
		private var listaFinanciamento: ArrayCollection;
		[Bindable]
		private var listaVendedor: ArrayCollection;
		
		private var popupLote:SelecionarLote;
		private var popupCadPromitente: MantemPromitente;
		private var popupSelPromitente: SelecionarPromitente;
		private var popupEditParcelaSinal: ManterParcelaSinal;
		//usada para verificar se está salvando ou cancelando ao fechar a tela
		private var salvarProposta: Boolean = false;
		private var promitente: Promitente;
		private var valorSinal: Number;
		private var retornoListas: int = 0;
		private var validatorArr: Array = new Array;
		private var proposta: Proposta;
		
		public var acao: String = "I";
		public var propostaExibir: Proposta;
		
		public static const ATUALIZAR:String = "Atualizar_ListaProposta";
				
		//Inicia a tela
		private function iniciarTela():void
		{
			loteamentoService.getList();
			dominioService.listarTipoPagto();
			vendedorService.getList();
			financiamentoService.getList();

			validatorArr.push(vlNumero);
			validatorArr.push(nvLoteamento);
			validatorArr.push(nvVendedor);
			validatorArr.push(nvQtdeLotes);
			validatorArr.push(vlCodigoPromitente);
			validatorArr.push(vlNomePromitente );
			validatorArr.push(nvSinal);
			validatorArr.push(nvQtdParcelaSinal);
			validatorArr.push(nvQtdParcelaFinanciamento);
			validatorArr.push(dvDtPrimVenc);
			validatorArr.push(nvQtdeDocPrenchidos);
			
			if (acao == "I")
			{
				proposta = new Proposta();
			}
			else
			{
				proposta = propostaExibir;
			}
		}
		
		//Carrega a tela para exibição com a proposta selecionada em Consultar Proposta
		private function carregarProposta(): void
		{
			try
			{
				if (acao != "I")
				{
					txNumero.text = proposta.numero;
					
					cbLoteamento.selectedIndex = Utils.getIndexLista(listaLoteamento, "nu_lotm", proposta.loteamento.nu_lotm);
					cbVendedor.selectedIndex = Utils.getIndexLista(listaVendedor, "cd_vend", proposta.vendedor.cd_vend);
					promitente = proposta.promitente;
					preencherPromitente(promitente);
					listaLotesProposta = proposta.lotes;
					txQtdeLotes.text = listaLotesProposta.length.toString();
					ckPagtoVista.selected = (proposta.pagamentoVista == "S");
					txValorTotal.text = nf.format(proposta.valorVista);
					if (!ckPagtoVista.selected)
					{
						txSinal.text = nf.format(proposta.valorSinal);
						cbQtdeParcelasSinal.selectedIndex = proposta.parcelasSinal.length;
						listaParcelasSinal = proposta.parcelasSinal;
						cbFinanciamento.selectedIndex = Utils.getIndexLista(listaFinanciamento, "qtdeParcelas", proposta.financiamento.qtdeParcelas.toString());
						txValorPrestacao.text = nf.format(proposta.valorParcela)
						dtPrimVencimento.selectedDate = proposta.dataPrimeiraParcela;
					}		
					txObservacao.text = proposta.observacao;
					calcularSaldo();
					
					if (acao == "C"){
						txNumero.editable = false;
						cbLoteamento.enabled = false;
						cbVendedor.enabled = false;
						txCodigoPromitente.editable = false;
						btCadastrarPromitente.visible = false;
						btConsultarPromitente.visible = false;
						btLimparPromitente.visible = false;
						btAddLote.enabled = false;
						btRemLote.enabled = false;
						ckPagtoVista.enabled = false;
						txValorTotal.editable = false;
						if (!ckPagtoVista.selected)
						{
							txSinal.editable = false;
							cbQtdeParcelasSinal.enabled = false;
							listaParcelasSinal = proposta.parcelasSinal;
							cbFinanciamento.enabled = false;
							txValorPrestacao.editable = false;
							dtPrimVencimento.enabled = false;
						}		
						txObservacao.editable = false;
						
						btSalvar.visible = false;
					}
				}			
			}
			catch (e: Error){
				Alert.show(e.message);
			}
		}
		
		//Fecha a tela
		public function fechar():void
		{
			//verifica se não está salvando a proposta
			//Se não estiver volta as situações do(s) lote(s) para Livre (L)
			if (!salvarProposta)
			{
				for each(var lote: LoteSisa in listaLotesProposta)
				{
					if (lote.situacao == "E")
					{
						lote.situacao = "L";						
						loteService.update(lote);
					}
				}
			}
			PopUpManager.removePopUp(this);
			
		}
		
		//consulta o promitente
		private function consultarPromitente(): void
		{
			//Se digita o código busca no serviço o promitente
			if (txCodigoPromitente.text != "")
			{
				promitenteService.findById(txCodigoPromitente.text);
			}
			else  //caso não digita o código abre-se uma tela de pesquisa para selecionar o promintente
			{
				popupSelPromitente = SelecionarPromitente(PopUpManager.createPopUp(this, SelecionarPromitente, true));
				
				popupSelPromitente.addEventListener(SelecionarPromitente.OK, popupSelPromitente_OK);
			}
		}
	
		//Chama a tela de selecionar lote
		private function adicionarLote():void
		{
			if (cbLoteamento.selectedIndex != -1)
			{
				popupLote = SelecionarLote( PopUpManager.createPopUp(this, SelecionarLote, true));
				//Fica aguardando o evento, caso clique ok na tela de selecionar lote
				popupLote.addEventListener(SelecionarLote.OK, popupLote_OK);
				//Caso o loteamento tenha sido selecionado, passa ele para o filtro de selecionar lote
				popupLote.loteamento = cbLoteamento.selectedItem as LoteamentoSisa;
			}
			else
			{
				Alert.show("Selecione o loteamento");
			}
		}
		
		//Remove um lote da lista
		private function removerLote(): void
		{
			var lote: LoteSisa = grLotes.selectedItem as LoteSisa;
			
			listaLotesProposta.removeItemAt(grLotes.selectedIndex);
			
			calcularTotal();
			
			calcularSaldo();
			parcelarSinal();
			calcularValorPrestacao();
			
            txQtdeLotes.text = listaLotesProposta.length.toString();
           	pnSinal.enabled = (listaLotesProposta.length != 0);
 			
			//Muda a situação do lote para livre (L)
			lote.situacao = "L";			
			loteService.update(lote);
		}
		
		//calcula o valor total do(s) lote(s) e o valor do sinal sugerido (10%)
		private function calcularTotal(): void
		{
			try
			{
				var total: Number = 0.00;
				for each(var lote: LoteSisa in listaLotesProposta)
				{
					total = total + lote.nu_area * lote.valorm2;
				}
				txValorTotal.text = nf.format(total);
				
				if (!ckPagtoVista.selected)
				{
					//propões o sinal como 10% (valor minimo) do valor total 
					var sinal: Number = total * 0.10;
					txSinal.text = nf.format(sinal);
					nvSinal.minValue = nf.format(sinal);
					nvSinal.maxValue = nf.format(total);
					nvSinal.enabled = true;
					nvQtdParcelaSinal.enabled = true;
					nvQtdParcelaFinanciamento.enabled = true;
					dvDtPrimVenc.enabled = true;
					ifSinal.required = true;
					ifQtdPagto.required = true;
					ifFinanciamento.required = true;
					ifValorPrestacao.required = true;
					ifPrimVenc.required = true;
				}
			}
			catch (e: Error)
			{
				Alert.show(e.message);
			}
		}
		
		private function focusSinal(): void
		{
			valorSinal = parseFloat(txSinal.text.replace(".", "").replace(",","."));
		}
		
		private function validarSinal(evt: Event): void
		{
			if (txSinal.text != "")
			{
				var total: Number = parseFloat(txValorTotal.text.replace(".", "").replace(",","."));
				var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
				
				if ((sinal / total) < 0.1)
				{
					Alert.show("Valor do Sinal não deve ser inferior a 10% do Valor Total!", "Atenção");
					txSinal.text = nf.format(valorSinal);
				}
				else
				{
					if (sinal != valorSinal)
					{
						calcularSaldo();
						parcelarSinal();
						calcularValorPrestacao();
					}
					txSinal.text = nf.format(sinal);
				}
			}
		}
		
		//Calcula o saldo
		private function calcularSaldo(): void
		{
			var total: Number = parseFloat(txValorTotal.text.replace(".", "").replace(",","."));
			var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
			
			txSaldo.text = nf.format(total - sinal);
		}
		
		//Salva a proposta
		private function salvar(): void
		{
			salvarProposta = true;
			
			if (Utils.validarForm(validatorArr))
			{
			
				//Se for inclusão cria uma nova proposta
				if (acao == "I")
				{
					proposta.numero = txNumero.text;
					proposta.situacao = "P";
					proposta.loteamento = cbLoteamento.selectedItem as LoteamentoSisa;
					proposta.vendedor = cbVendedor.selectedItem as VendedorSisa;
					proposta.promitente = promitente;
					proposta.lotes = listaLotesProposta;
					proposta.pagamentoVista = (ckPagtoVista.selected? "S": "N");
					proposta.valorVista = parseFloat(txValorTotal.text.replace(".", "").replace(",", "."));
					if (!ckPagtoVista.selected)
					{
						if (txSinal.text != "")
						{
							proposta.valorSinal = parseFloat(txSinal.text.replace(".", "").replace(",", "."));
							for each(var parcela: ParcelaSinal in listaParcelasSinal)
							{
								parcela.proposta = proposta;
							}
							proposta.parcelasSinal = listaParcelasSinal;
						}
						proposta.financiamento = cbFinanciamento.selectedItem as Financiamento;
						proposta.valorParcela = parseFloat(txValorPrestacao.text.replace(".", "").replace(",", "."));
						proposta.dataPrimeiraParcela = dtPrimVencimento.selectedDate;
					}		
					proposta.observacao = txObservacao.text;
					proposta.situacao = "P";
					proposta.dataEmissao = new Date();
					//insere a proposta
					propostaService.save(proposta);
				}
				else
				{
					//altera a proposta
					propostaService.update(proposta);
				}
			}
			//fecha a tela
			//fechar();
		}
		
		//função de retorno da tela de Selecionar Lote
        private function popupLote_OK(e:Event):void{
        	try
        	{
	        	//Se é o primeiro lote cria a lista de lotes 
	        	if (listaLotesProposta == null)
	        	{
	        		listaLotesProposta = new ArrayCollection();
	        	}
	            listaLotesProposta.addItem(popupLote.lote);
	            calcularTotal();
	            calcularSaldo();
	            parcelarSinal();
	            calcularValorPrestacao();
	            
	            txQtdeLotes.text = listaLotesProposta.length.toString();
	           	pnSinal.enabled = (listaLotesProposta.length != 0);
	            
	            //Alterar a situção do lote para Em reserva (E)
	            popupLote.lote.situacao = "E";
	            loteService.update(popupLote.lote);
	            
	            PopUpManager.removePopUp(popupLote);
         	}
         	catch(e: Error){
         		Alert.show(e.message);
         	}
        }
        
		//labelFunction para formatar Área
		private function formatarArea(item: Object, column:DataGridColumn): String
		{
			var lote: LoteSisa = item as LoteSisa;
			return nf.format(lote.nu_area);
		}
		
		//labelFunction para formatar valor
		private function formatarValor(item: Object, column:DataGridColumn): String
		{
			//var lote: LoteSisa = item as LoteSisa;
			return nf.format(item[column.dataField]);
		}	
		//LabelFunction que calcula o valor do lote	
		private function calcularValor(item: Object, column:DataGridColumn): String
		{
			var lote: LoteSisa = item as LoteSisa;
			return nf.format(lote.nu_area * lote.valorm2);
		}
		
		private function formatarData(item: Object, column:DataGridColumn): String
		{
			return df.format(item[column.dataField]);
		}
		
		private function formatarTipoPagto(item: Object, column:DataGridColumn): String
		{
			var descricao: String = "";
			for each(var tipo: objDominio in listaTipoPagto)
			{
				if (tipo.codigo == item[column.dataField])
				{
					descricao = tipo.descricao;
					break;
				}
			}
			return descricao;
		}
		
		//método de retorno do serviço de Tipo de Pagto
		private function onResultListaTipoPagto(e: ResultEvent): void
		{
			listaTipoPagto = e.result as ArrayCollection;
			retornoListas = retornoListas + 1;
			if (retornoListas == 4){
				carregarProposta();
			}
		}
		
		//método de retorno do serviço de Loteamento
		private function onResultListaLoteamento(e: ResultEvent): void
		{
			listaLoteamento = e.result as ArrayCollection;
			retornoListas = retornoListas + 1;
			if (retornoListas == 4){
				carregarProposta();
			}
		}
		
		//Limpa os dados do promitente
		private function limparPromitente(): void
		{
			promitente = null;
			txCodigoPromitente.text = "";
			txNomePromitente.text = "";
			txTelefonePromitente.text = "";
			txEnderecoPromitente.text = "";
			txCodigoPromitente.setFocus();
		}
		
		//preenche os dados do promitente
		private function preencherPromitente(prom: Promitente): void
		{
			txCodigoPromitente.text = prom.codigo;
			txNomePromitente.text = prom.nome;
			txTelefonePromitente.text = prom.telefoneCobranca;
			var endereco: String;
			
			endereco = prom.enderecoCobranca.logradouro;
			if (prom.enderecoCobranca.numero != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.numero;
			}
			if (prom.enderecoCobranca.complemento != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.complemento;
			}
			if (prom.enderecoCobranca.bairro != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.bairro;
			}
			if (prom.enderecoCobranca.cidade != null)
			{
				endereco = endereco + ", " + prom.enderecoCobranca.cidade;
				if (prom.enderecoCobranca.uf != null)
				{
					endereco = endereco + " - " + prom.enderecoCobranca.uf;
				}
			}
			txEnderecoPromitente.text = endereco;
			
		}

		//método de retorno do serviço de Promitente
		private function onResultConsultaPromitente(e: ResultEvent): void
		{
			if (e.result != null)
			{
				promitente = e.result as Promitente;
				
				preencherPromitente(promitente);
			}
			else
			{
				Alert.show("Promitente não cadastrado! Deseja cadastrar um novo?", "Confirmação"
			           ,Alert.YES| Alert.NO
			           ,null
			           ,handleAlert
			           ,null
			           ,Alert.YES);
			}
		}
		
		//evento ao fechar do Alert
		private function handleAlert(e: CloseEvent): void
		{
			if (e.detail == Alert.YES)
			{
				cadastrarPromitente();
			}
		}
		
		//Chama a tela para cadastrar um novo promitente
		private function cadastrarPromitente(): void
		{
        	popupCadPromitente = MantemPromitente(PopUpManager.createPopUp(UIComponent(this.parentApplication), sisa.com.br.TelaPromitente.MantemPromitente, true));
        	
        	popupCadPromitente.addEventListener(MantemPromitente.SALVAR, popupCadPromitente_OK);
        	
        	popupCadPromitente.retornarPromitente = true;
		}
		
		//evento chamado ao clicar em OK na tela de selecionar promitente
		private function popupSelPromitente_OK(e: Event): void
		{
			promitente = popupSelPromitente.promitente;
			
			preencherPromitente(promitente);
			
			PopUpManager.removePopUp(popupSelPromitente);
		}
		
		//evento chamado ao clicar em SALVAR na tela de cadastrar promitente
		private function popupCadPromitente_OK(e: Event): void
		{
			promitente = popupCadPromitente.promitenteRetornar;
			
			preencherPromitente(promitente);
			
			PopUpManager.removePopUp(popupCadPromitente);
		}
		
		//funcão chamada no change de cbQtdeParcelasSinal para parcelar o sinal
		private function parcelarSinal(): void
		{
			if (acao != "C")
			{
				if ((cbQtdeParcelasSinal.selectedIndex != -1) && (txSinal.text != ""))
				{
					var qtdParcela: int = parseInt(cbQtdeParcelasSinal.text);
					var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
					var valorParcela: Number = sinal / qtdParcela;
					var dataVenc: Date = new Date();
					
					nvQtdeDocPrenchidos.minValue = qtdParcela;
					nvQtdeDocPrenchidos.enabled = true;
					
					if (listaParcelasSinal != null)
					{
						listaParcelasSinal = null;
					}
					listaParcelasSinal = new ArrayCollection;
					
					for (var i: int = 1; i <= qtdParcela; i++)
					{
						var parcela: ParcelaSinal = new ParcelaSinal();
						
						//parcela.proposta = proposta;
						parcela.parcela = i;
						parcela.tipoPagto = "B";
						parcela.valor = valorParcela;
						parcela.dataVencimento = dataVenc;
						
						listaParcelasSinal.addItem(parcela);
						
						dataVenc = Utils.dateAdd("month", 1, dataVenc);
					}
				}
			}
		}

		//método de retorno do serviço de Financiamento
		private function onResultListaFinanciamento(e: ResultEvent): void
		{
			listaFinanciamento = e.result as ArrayCollection;
			retornoListas = retornoListas + 1;
			if (retornoListas == 4){
				carregarProposta();
			}
		}

		//método de retorno do serviço de Vendedor
		private function onResultListaVendedor(e: ResultEvent): void
		{
			listaVendedor = e.result as ArrayCollection;
			retornoListas = retornoListas + 1;
			if (retornoListas == 4){
				carregarProposta();
			}
		}
		
		//método de retorno do serviço de Proposta
		private function onResultProposta(e: ResultEvent): void
		{
			if (acao == "I")
			{
				Alert.show("Proposta cadastrada com sucesso!");
			}
			else
			{
				Alert.show("Proposta alterada com sucesso!");
			}
			dispatchEvent(new Event(ATUALIZAR));
		}

		//método de retorno das falhas nos serviços
		private function onFault(event:FaultEvent):void
		{												
			Alert.show(Utils.mensagemErro(event));
		}
		
		
		//chamado ao clicar no icone de fechar a janela
		private function titleWindow_close(evt:CloseEvent):void 
		{
			fechar();
		}
		
		//Editar a parcela do Sinal
		public function editarParcela(): void
		{
			popupEditParcelaSinal = ManterParcelaSinal(PopUpManager.createPopUp(UIComponent(this.parentApplication), sisa.com.br.TelaProposta.ManterParcelaSinal, true));
			
			popupEditParcelaSinal.addEventListener(ManterParcelaSinal.OK, popupEditParcelaSinal_OK);
			
			popupEditParcelaSinal.parcelaSinal = grParcelaSinal.selectedItem as ParcelaSinal;
		}
		
		private function desabilitarSinalParcelamento(): void
		{
			pnSinal.enabled = !ckPagtoVista.selected;
			pnParcelamento.enabled = !ckPagtoVista.selected;
			if (!ckPagtoVista.selected)
			{
				ifSinal.required = true;
				ifQtdPagto.required = true;
				ifFinanciamento.required = true;
				ifValorPrestacao.required = true;
				ifPrimVenc.required = true;
				nvSinal.enabled = true;
				nvQtdParcelaSinal.enabled = true;
				nvQtdParcelaFinanciamento.enabled = true;
				dvDtPrimVenc.enabled = true;
				nvQtdeDocPrenchidos.enabled = (cbQtdeParcelasSinal.selectedIndex != -1);
			}
			else
			{
				ifSinal.required = false;
				ifQtdPagto.required = false;
				ifFinanciamento.required = false;
				ifValorPrestacao.required = false;
				ifPrimVenc.required = false;
				nvSinal.enabled = false;
				nvQtdParcelaSinal.enabled = false;
				nvQtdParcelaFinanciamento.enabled = false;
				dvDtPrimVenc.enabled = false;
				nvQtdeDocPrenchidos.enabled = false;
			}
		}

		//evento chamado ao clicar em OK na tela de editar parcela
		private function popupEditParcelaSinal_OK(e: Event): void
		{
			var sinal: Number = parseFloat(txSinal.text.replace(".", "").replace(",","."));
			var totalParcelas: Number = 0;
			var totalDocPrenchidos: int = 0;
			
			for (var i: int = 0; i < listaParcelasSinal.length; i++) 
			{
				var parcelaSinal: ParcelaSinal = listaParcelasSinal.getItemAt(i) as ParcelaSinal;
				if (i != grParcelaSinal.selectedIndex)
				{
					totalParcelas += parcelaSinal.valor;
				}	
				if (parcelaSinal.numeroDocumento != null)
				{
					totalDocPrenchidos++;
				}
			}
			totalParcelas += popupEditParcelaSinal.parcelaSinal;
			
			txDocPreenchidos.text = totalDocPrenchidos.toString();
						
			if (totalParcelas > sinal)
			{
				Alert.show("A soma das parcelas não pode ser maior que o sinal!");
			}
			else
			{
				listaParcelasSinal.setItemAt(popupEditParcelaSinal.parcelaSinal, grParcelaSinal.selectedIndex);
			}
			
			PopUpManager.removePopUp(popupEditParcelaSinal);
		}
		
		private function calcularValorPrestacao(): void
		{
			if (cbFinanciamento.selectedIndex != -1)
			{
				var saldo: Number = parseFloat(txSaldo.text.replace(".", "").replace(",","."));
				
				var valorPrestacao: Number = saldo * (cbFinanciamento.selectedItem as Financiamento).percentual;
				
				txValorPrestacao.text = nf.format(valorPrestacao);
			}
		}
		]]>
	</mx:Script>
	<mx:Style>
		.CenterHeader {
			textAlign: center;
		}
		.FormAlign{
			horizontal-align: right;
		}
	</mx:Style>

	<mx:RemoteObject id="propostaService" showBusyCursor="true" fault="onFault(event)" destination="propostaService">
		<mx:method name="save" result="onResultProposta(event)" fault="onFault(event)"/>
		<mx:method name="update" result="onResultProposta(event)" fault="onFault(event)"/>
		<mx:method name="findById" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="dominioService" showBusyCursor="true" fault="onFault(event)" destination="dominioService">
		<mx:method name="listarTipoPagto" result="onResultListaTipoPagto(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="loteamentoService" showBusyCursor="true" fault="onFault(event)" destination="loteamentoService">
		<mx:method name="getList" result="onResultListaLoteamento(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="promitenteService" showBusyCursor="true" fault="onFault(event)" destination="promitenteService">
		<mx:method name="findById" result="onResultConsultaPromitente(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="loteService" showBusyCursor="true" fault="onFault(event)" destination="loteService">
		<mx:method name="update" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="financiamentoService" showBusyCursor="true" fault="onFault(event)" destination="financiamentoService">
		<mx:method name="getList" result="onResultListaFinanciamento(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="vendedorService" showBusyCursor="true" fault="onFault(event)" destination="vendedorService">
		<mx:method name="getList" result="onResultListaVendedor(event)" fault="onFault(event)"/>
	</mx:RemoteObject>
	
	<mx:NumberFormatter id="nf"  precision="2" decimalSeparatorTo="," thousandsSeparatorTo="." useThousandsSeparator="true" />

	<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
	
	<mx:Validator id="vlNumero" source="{txNumero}" property="text" 
		required="true"
		requiredFieldError="Informe o número da proposta" />
	
	<mx:NumberValidator id="nvLoteamento" source="{cbLoteamento}" property="selectedIndex"
		minValue="0"
		lowerThanMinError="Informe o loteamento"  />
	
	<mx:NumberValidator id="nvVendedor" source="{cbVendedor}" property="selectedIndex"
		minValue="0"
		lowerThanMinError="Informe o vendedor"  />
	
	<mx:NumberValidator id="nvQtdeLotes" source="{txQtdeLotes}" property="text"
		minValue="1"
		lowerThanMinError="Selecione pelo menos um lote"  />
	
	<mx:NumberValidator id="nvSinal" source="{txSinal}" property="text"
		required="true"
		requiredFieldError="Informe o valor do sinal" 
		decimalSeparator=","
		thousandsSeparator="."
		precision="2"
		minValue="0"
		lowerThanMinError="Valor do sinal deve ser maior ou igual que 10% do valor total"
		maxValue="10000,00"
		exceedsMaxError="Valor do sinal não pode ser maior que o valor total"
		enabled="false" />
		
	<mx:NumberValidator id="nvQtdParcelaSinal" source="{cbQtdeParcelasSinal}" property="selectedIndex"
		minValue="0"
		lowerThanMinError="Informe a qtde de parcelas do sinal"
		enabled="false" />

	<mx:NumberValidator id="nvQtdParcelaFinanciamento" source="{cbFinanciamento}" property="selectedIndex"
		minValue="0"
		lowerThanMinError="Informe a qtde de parcelas do financiamento"
		enabled="false" />
	
	<mx:DateValidator id="dvDtPrimVenc" source="{dtPrimVencimento}" property="selectedDate"
		required="true"
		requiredFieldError="Informe a data do primeiro vencimento do financiamento"
		inputFormat="DD/MM/YYYY"
		enabled="false"	/>

	<mx:NumberValidator id="nvQtdeDocPrenchidos" source="{txDocPreenchidos}" property="text"
		minValue="1"
		lowerThanMinError="Informe os números dos documentos de todas as parcelas do sinal"
		enabled="false" />
	
	<mx:Validator id="vlCodigoPromitente" source="{txCodigoPromitente}" property="text"
		required="true"
		requiredFieldError="Informe o promitente" />
	
	<mx:Validator id="vlNomePromitente" source="{txNomePromitente}" property="text"
		required="true"
		requiredFieldError="Selecione o promitente" />
	
	<mx:Form x="0" y="0" width="286" paddingLeft="12" paddingTop="5" verticalGap="2" paddingBottom="5">
		<mx:FormItem label="Número:" horizontalAlign="left" required="true">
			<mx:TextInput width="64" maxChars="5" id="txNumero" height="19"/>
		</mx:FormItem>
		<mx:FormItem label="Loteamento:" horizontalAlign="right" required="true">
			<mx:ComboBox id="cbLoteamento" width="173" height="19" dataProvider="{listaLoteamento}" labelField="ds_lotm" prompt="Selecione o Loteamento..." selectedIndex="-1"></mx:ComboBox>
		</mx:FormItem>
	</mx:Form>
	<mx:Form x="285" y="22" paddingBottom="5" paddingLeft="0" paddingRight="5" paddingTop="5">
		<mx:FormItem label="Vendedor:" required="true">
			<mx:ComboBox id="cbVendedor" dataProvider="{listaVendedor}" labelField="ds_razao_nome" width="342" height="19" prompt="Selecione o Vendedor..." selectedIndex="-1"></mx:ComboBox>
		</mx:FormItem>
	</mx:Form>
	<mx:Button x="496" y="370" label="Salvar" icon="@Embed(source='../../../../img/button/10.png')" id="btSalvar" toolTip="Adicionar um lote" click="salvar()" width="98" height="24"/>
	<mx:Button x="602" y="370" label="Cancelar" click="fechar()" id="btCancelar" width="98" height="24">
		<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
	</mx:Button>
	<mx:TabNavigator x="10" y="60" width="691" height="302" backgroundColor="#EFF5FB" borderStyle="solid" creationPolicy="all">
		<mx:Canvas label="Promitente" width="100%" height="100%">
			<mx:Panel x="10" y="10" width="668" layout="absolute" title="Promitente" backgroundColor="#EFF5FB" headerHeight="22">
				<mx:Form x="0" y="0" width="100%" alpha="1.0" paddingTop="5" paddingLeft="5" verticalGap="2" paddingBottom="5" paddingRight="5" height="100%">
					<mx:FormItem label="Código:" required="true">
						<mx:TextInput id="txCodigoPromitente" width="80" maxChars="5" height="19"/>
					</mx:FormItem>
					<mx:FormItem label="Nome:" required="true">
						<mx:TextInput width="336" editable="false" enabled="false" height="19" id="txNomePromitente"/>
					</mx:FormItem>
					<mx:FormItem label="Endereço:">
						<mx:TextInput editable="false" enabled="false" width="559" height="19" id="txEnderecoPromitente"/>
					</mx:FormItem>
					<mx:FormItem label="Telefone:">
						<mx:TextInput width="141" editable="false" enabled="false" height="19" id="txTelefonePromitente"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Button x="160" y="5" width="27" height="19" id="btConsultarPromitente" click="consultarPromitente()" toolTip="Consultar promitente">
					<mx:icon>@Embed(source='../../../../img/button/search.png')</mx:icon>
				</mx:Button>
				<mx:Button x="191" y="5" width="27" height="19" id="btCadastrarPromitente" toolTip="Cadastrar novo promitente" click="cadastrarPromitente()">
					<mx:icon>@Embed(source='../../../../img/button/add.png')</mx:icon>
				</mx:Button>
				<mx:Button x="222" y="5" width="27" height="19" id="btLimparPromitente" toolTip="Limpar promitente" click="limparPromitente()">
					<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
				</mx:Button>
			</mx:Panel>
			<mx:TextArea x="10" y="168" width="669" height="63" id="txObservacao" maxChars="60" wordWrap="true"/>
			<mx:Label x="10" y="148" text="Observação:"/>
		</mx:Canvas>
		<mx:Canvas label="Lotes" width="100%" height="100%">
			<mx:DataGrid x="10" y="10" width="669" height="199" id="grLotes" editable="false"  headerHeight="20" rowHeight="19" dataProvider="{listaLotesProposta}">
				<mx:columns>
					<mx:DataGridColumn headerText="Quadra" dataField="nu_quadra" headerStyleName="CenterHeader" />
					<mx:DataGridColumn headerText="Lote" dataField="nu_lote" headerStyleName="CenterHeader"/>
					<mx:DataGridColumn headerText="Área (m²)" headerStyleName="CenterHeader" textAlign="right" dataField="nu_area" labelFunction="formatarValor"/>
					<mx:DataGridColumn headerText="Valor do m² (R$)" headerStyleName="CenterHeader" textAlign="right" dataField="valorm2" labelFunction="formatarValor"/>
					<mx:DataGridColumn headerText="Valor (R$)" labelFunction="calcularValor" headerStyleName="CenterHeader" textAlign="right"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:Button x="10" y="215" label="Adicionar" icon="@Embed(source='../../../../img/button/add.png')" id="btAddLote" toolTip="Adicionar um lote" click="adicionarLote()"/>
			<mx:Button x="120" y="215" label="Remover" click="removerLote()" id="btRemLote">
				<mx:icon>@Embed(source='../../../../img/button/cancel.png')</mx:icon>
			</mx:Button>
			<mx:Form x="500" y="215" paddingBottom="5" paddingLeft="5" paddingRight="0" paddingTop="5" textAlign="right">
				<mx:FormItem label="Quantidade de Lotes:">
					<mx:TextInput width="44" height="19" enabled="true" id="txQtdeLotes" textAlign="right" text="0" editable="false" backgroundColor="#D9D6D6"/>
				</mx:FormItem>
			</mx:Form>
		</mx:Canvas>
		<mx:Canvas label="Plano de Pagamento" width="100%" height="100%">
			<mx:Panel x="10" y="34" width="666" layout="absolute" headerHeight="22" title="Sinal" backgroundColor="#EFF5FB" enabled="true" id="pnSinal">
				<mx:DataGrid x="0" y="27" width="100%" height="90" id="grParcelaSinal" dataProvider="{listaParcelasSinal}">
					<mx:columns>
						<mx:DataGridColumn headerText="Parcela" dataField="parcela" width="70" headerStyleName="CenterHeader"/>
						<mx:DataGridColumn headerText="Tipo de Pagto." dataField="tipoPagto" labelFunction="formatarTipoPagto" width="120" headerStyleName="CenterHeader" />
						<mx:DataGridColumn headerText="Documento" dataField="numeroDocumento" width="100" headerStyleName="CenterHeader"/>
						<mx:DataGridColumn headerText="Valor" dataField="valor" width="100" headerStyleName="CenterHeader" labelFunction="formatarValor"  textAlign="right"/>
						<mx:DataGridColumn headerText="Data de Vencimento" dataField="dataVencimento" labelFunction="formatarData" headerStyleName="CenterHeader"/>
						<mx:DataGridColumn width="17">
							<mx:itemRenderer>
								<mx:Component>
									<mx:Button click="parentDocument.editarParcela()" enabled="{(parentDocument.acao != 'C'? true: false)}" >
										<mx:icon>@Embed(source='../../../../img/button/reply.png')</mx:icon>
									</mx:Button>
								</mx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
				<mx:Form x="0" y="1" paddingBottom="5" paddingTop="2" paddingLeft="5" paddingRight="5">
					<mx:FormItem label="Valor:" required="false" id="ifSinal">
						<mx:TextInput width="112" id="txSinal" textAlign="right" height="19" focusIn="focusSinal()" focusOut="validarSinal(event)"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Form x="200" y="0" paddingBottom="5" paddingTop="2" paddingLeft="5" paddingRight="5">
					<mx:FormItem label="Parcelamento:" required="false" id="ifQtdPagto">
						<mx:ComboBox height="19" width="135" id="cbQtdeParcelasSinal" labelField="label" change="parcelarSinal()" prompt="Selecione a qtde..." selectedIndex="-1">
							<mx:dataProvider>
								<mx:ArrayCollection>
									<mx:Object label="1 parcela" data="1"/>
									<mx:Object label="2 parcelas" data="2"/>
									<mx:Object label="3 parcelas" data="3"/>
									<mx:Object label="4 parcelas" data="4"/>							
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:FormItem>
				</mx:Form>
				<mx:TextInput x="602" y="0" width="44" id="txDocPreenchidos" text="0" editable="false" visible="false"/>
			</mx:Panel>
			<mx:Form x="10" y="10" paddingBottom="5" paddingTop="0" paddingLeft="12" paddingRight="5" verticalGap="3" autoLayout="false">
				<mx:FormItem label="Pagamento a Vista">
					<mx:CheckBox width="29" id="ckPagtoVista" click="desabilitarSinalParcelamento()"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Panel x="10" y="192" width="666" layout="absolute" headerHeight="22" title="Parcelamento" backgroundColor="#EFF5FB" id="pnParcelamento">
				<mx:Form x="0" y="0" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
					<mx:FormItem label="Número de Parcelas:" id="ifFinanciamento" required="false">
						<mx:ComboBox width="139" id="cbFinanciamento" dataProvider="{listaFinanciamento}" labelField="qtdeParcelas" height="19" change="calcularValorPrestacao()" selectedIndex="-1" prompt="Selecione a qtde..."></mx:ComboBox>
					</mx:FormItem>
				</mx:Form>
				<mx:Form x="281" y="0" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
					<mx:FormItem label="Valor:" required="false" id="ifValorPrestacao">
						<mx:TextInput width="89" editable="false" enabled="true" id="txValorPrestacao" textAlign="right" height="19" backgroundColor="#D9D6D6"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Form x="434" y="0" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
					<mx:FormItem label="1º Vencimento:" id="ifPrimVenc" required="false">
						<mx:DateField height="19" id="dtPrimVencimento" formatString="DD/MM/YYYY" dayNames="['D','S','T','Q','Q','S','S']" monthNames="['Janeiro','Fevereiro','Março','Abril',
						'Maio','Junho','Julho','Agosto','Setembro','Outubro',
						'Novembro','Dezembro']" disabledDays="[0,6]" yearNavigationEnabled="true" useHandCursor="true" restrict="0-9/" editable="true" showToday="false" width="104"/>
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>
			<mx:Form x="506" y="10" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0" styleName="FormAlign">
				<mx:FormItem label="Saldo:">
					<mx:TextInput width="112" editable="false" enabled="true" height="19" id="txSaldo" textAlign="right" backgroundColor="#D9D6D6"/>
				</mx:FormItem>
			</mx:Form>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Form x="10" y="367" paddingTop="3" paddingBottom="3" paddingLeft="0" paddingRight="5" styleName="FormAlign">
		<mx:FormItem label="Valor Total da Proposta:" required="true">
			<mx:TextInput width="131" id="txValorTotal" editable="false" enabled="true" textAlign="right" backgroundColor="#D9D6D6" height="19"/>
		</mx:FormItem>
	</mx:Form>
	
</mx:TitleWindow>
