<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fc="com.adobe.flex.extras.controls.*" creationComplete="iniciarTela()"
				 xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Consulta Proposta"
				width="1006" height="404" enabled="true" horizontalAlign="center" verticalAlign="middle">

	<mx:Metadata>
    	[ResourceBundle("MessagemResource_pt_BR")] //Nome do arquivo .properties
    </mx:Metadata>
    
	<mx:Script>
		<![CDATA[
			import sisa.com.br.entidade.LoteSisa;
			import mx.events.CloseEvent;
			import sisa.com.br.componentes.Utils;
			import mx.core.UIComponent;
			import sisa.com.br.entidade.VendedorSisa;
			import sisa.com.br.dominio.objDominio;
			import mx.binding.utils.BindingUtils;
			import sisa.com.br.entidade.Promitente;
			import sisa.com.br.entidade.Proposta;
			import sisa.com.br.entidade.Financiamento;
			import sisa.com.br.entidade.LoteamentoSisa;
			import mx.rpc.events.ResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			
			public var telaProposta:ManterProposta;
			public var proposta:Proposta;
			[Bindable]
			private var listaProposta:ArrayCollection;
			[Bindable]
			private var listaLoteamento: ArrayCollection;
			[Bindable]
			private var listaSituacao: ArrayCollection;
			[Bindable]
			private var listaVendedor: ArrayCollection;
			
			private var acaoProposta: String;
			private var propostaSelecionada: Proposta;
			
			public function iniciarTela():void{
				getList();
				loteamentoService.getList();
				vendedorService.getList();
				dominioService.listarSituacaoProposta();
			}
			
			//Consulta promitentes pegando os campos da tela 
			public function consultaProposta():void
			{	  
				this.proposta = new Proposta();
				var filtrar: Boolean = false;
				
				if (cbLoteamento.selectedIndex != 0)
				{ 			 
					proposta.loteamento = cbLoteamento.selectedItem as LoteamentoSisa;
					filtrar = true;
				}
				if (txNomePromitente.text != "")
				{
					proposta.promitente = new Promitente();
					proposta.promitente.codigo = txCodigoPromitente.text;
					filtrar = true;
				}
				if (cbVendedor.selectedIndex != 0)
				{ 			 
					proposta.vendedor = cbVendedor.selectedItem as VendedorSisa;
					filtrar = true;
				}
				if (cbSituacao.selectedIndex != 0)
				{ 			 
					proposta.situacao = cbSituacao.selectedItem.codigo;
					filtrar = true;
				}
				  
				if (filtrar)
				{
					propostaService.find(proposta);
				}
				else
				{
					getList();
				} 
				  
			}
			
			public function consultarPromitente(): void
			{
				if (txCodigoPromitente.text != "")
				{
					promitenteService.findById(txCodigoPromitente.text);
				}
				else
				{
					//Colocar o código para abrir tela de pesquisa de promitentes 
				}
			}
			
			//retorno do java da consulta de proposta
			public function onResultConsultaProposta(event:ResultEvent):void
			{ 
				 listaProposta = event.result as ArrayCollection;
			}
			
			//Consulta a lista de todos as proposstas
			public function getList():void
			{
				propostaService.getList();
			}
			
			//Função que será executada após a conclusão do método getList
			public function onResultListaProposta(event:ResultEvent):void
			{
				listaProposta = event.result as ArrayCollection;
			}
			
//			private function getCodigoLoteamento(item: Object, column:DataGridColumn): String
//			{
//				//var lotes: ArrayCollection = item["lotes"] as ArrayCollection;
//				//Alert.show(lotes.length.toString());
//				return "";
//			}
			
		
			public function detalharProposta():void
			{            		
            	//telaProposta = ManterProposta(PopUpManager.createPopUp(this, sisa.com.br.TelaProposta.MantemProposta, true));
            	//Enviando objeto selecionado para tela seguinte
            	//telaPromitente.promitenteEditar = grProposta.selectedItem as Promitente;  
            	//PopUpManager.centerPopUp(telaPromitente);
			}
			
			public function alterarProposta():void
			{   
				    		
            	//telaPromitente = MantemPromitente(PopUpManager.createPopUp(this, sisa.com.br.TelaPromitente.MantemPromitente, true));
            	//Enviando objeto selecionado para tela seguinte
            	//telaPromitente.promitenteEditar = grProposta.selectedItem as Promitente;  
            	//PopUpManager.centerPopUp(telaPromitente);
            	
			}
			
			public function removerProposta():void{
				if(grProposta.selectedItem != null){
					 this.proposta = new Proposta();
					 this.proposta.numero = grProposta.selectedItem.numero;
					 propostaService.remove(proposta);
				}
			}
			
			//Função que será executada após a conclusão do método getList
			public function onResultRemoverProposta(event:ResultEvent):void
			{
				Alert.show("Proposta removida com sucesso");
				getList();
			}
			
			public function onResultListaLoteamento(event: ResultEvent): void
			{
				listaLoteamento = event.result as ArrayCollection;
				var loteamento: LoteamentoSisa = new LoteamentoSisa();
				loteamento.nu_lotm = "0";
				loteamento.ds_lotm = "{Todos}";
				listaLoteamento.addItemAt(loteamento, 0);
				cbLoteamento.selectedIndex = 0;
			}
			
			public function onResultConsultaPromitente(e: ResultEvent): void
			{
				var promitente: Promitente = e.result as Promitente;
				
				txNomePromitente.text = promitente.nome;
			}
			
			public function onResultListaVendedor(e: ResultEvent): void
			{
				listaVendedor = e.result as ArrayCollection;
				var vendedor: VendedorSisa = new VendedorSisa();
				vendedor.cd_vend = "0";
				vendedor.ds_razao_nome = "{Todos}";
				listaVendedor.addItemAt(vendedor, 0);
				cbVendedor.selectedIndex = 0;
			}
			
			public function onResultListaSituacao(e: ResultEvent): void
			{
				listaSituacao = e.result as ArrayCollection;
				var dominio: objDominio = new objDominio();
				dominio.codigo = "0";
				dominio.descricao = "(Todas)";
				listaSituacao.addItemAt(dominio, 0);
				cbSituacao.selectedIndex = 0;
			}
			
			public function onResultAlterarProposta(e: ResultEvent): void
			{
				switch (acaoProposta)
				{
					case "C":
						Alert.show("Proposta cancelada com sucesso!");
						break;
					case "A":
						Alert.show("Proposta autorizada com sucesso!");
						break;
				}
				getList();
			}
			
			//Ocorreu uma falha ao chamar algum servico servico.
			public function onFault(event:FaultEvent):void
			{												
				Alert.show(event.fault.message);
			}
			
			public function cadastrarProposta():void{
            	
            	telaProposta = ManterProposta(PopUpManager.createPopUp(UIComponent(this.parentApplication), sisa.com.br.TelaProposta.ManterProposta, true));
            	PopUpManager.centerPopUp(telaProposta);
			}
			
			private function cancelarProposta(): void
			{
				acaoProposta = "C"; //Cancelar a proposta
				Alert.show("Confirma cancelamento da proposta '" + propostaSelecionada.numero + "'?", "Confirmação"
			           ,Alert.YES| Alert.NO
			           ,null
			           ,handleAlert
			           ,null
			           ,Alert.YES);
				
			}
			
			private function autorizarProposta(): void
			{
				acaoProposta = "A"; //Cancelar a proposta
				Alert.show("Confirma autorização da proposta '" + propostaSelecionada.numero + "'?", "Confirmação"
			           ,Alert.YES| Alert.NO
			           ,null
			           ,handleAlert
			           ,null
			           ,Alert.YES);
				
			}

			//labelFunction para formatar valor
			private function formatarValor(item: Object, column:DataGridColumn): String
			{
				return nf.format(item[column.dataField]);
			}	
			
			private function getDescricaoSituacao(item: Object, column:DataGridColumn): String
			{
				var descricao: String = "";
				var situacao: String = item[column.dataField];
				var index: int = Utils.getIndexListaDominio(listaSituacao, situacao);
				
				descricao = (listaSituacao.getItemAt(index) as objDominio).descricao;
				
				return descricao;
			}
			
			private function changeRowSelected(event:Event):void
			{
				propostaSelecionada = (event.target.selectedItem as Proposta);
				btAutorizarProposta.enabled = (propostaSelecionada.situacao == "P");
				btCancelarProposta.enabled = ((propostaSelecionada.situacao == "P") || (proposta.situacao == "A"));
			}

			//evento ao fechar do Alert
			private function handleAlert(e: CloseEvent): void
			{
				if (e.detail == Alert.YES)
				{
					switch (acaoProposta){
						case "C": //Cancelar
							propostaService.cancelar(propostaSelecionada);
							break;
						case "A": //Autorizar
							propostaService.autorizar(propostaSelecionada);
							break;
					}
					propostaService.update(propostaSelecionada);
				}
			}
			
		]]>
	</mx:Script>
	<mx:Style>
		.CenterHeader {
			textAlign: center;
		}
		.FormAlign{
			horizontal-align: right;
		}
	</mx:Style>

	<mx:RemoteObject id="propostaService" showBusyCursor="true" fault="onFault(event)" destination="propostaService">
		<mx:method name="getList" result="onResultListaProposta(event)" fault="onFault(event)"/>
		<mx:method name="remove" result="onResultRemoverProposta(event)" fault="onFault(event)"/>
		<mx:method name="cancelar" result="onResultAlterarProposta(event)" fault="onFault(event)"/>
		<mx:method name="autorizar" result="onResultAlterarProposta(event)" fault="onFault(event)"/>
		<mx:method name="find" result="onResultListaProposta(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="loteamentoService" showBusyCursor="true" fault="onFault(event)" destination="loteamentoService">
		<mx:method name="getList" result="onResultListaLoteamento(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="promitenteService" showBusyCursor="true" fault="onFault(event)" destination="promitenteService">
		<mx:method name="findById" result="onResultConsultaPromitente(event)" fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:RemoteObject id="vendedorService" showBusyCursor="true" fault="onFault(event)" destination="vendedorService">
		<mx:method name="getList" result="onResultListaVendedor(event)" fault="onFault(event)"/>
	</mx:RemoteObject>
	
	<mx:RemoteObject id="dominioService" showBusyCursor="true" fault="onFault(event)" destination="dominioService">
		<mx:method name="listarSituacaoProposta" result="onResultListaSituacao(event)" fault="onFault(event)"/>
	</mx:RemoteObject>
	
	<mx:NumberFormatter id="nf"  precision="2" decimalSeparatorTo="," thousandsSeparatorTo="." useThousandsSeparator="true" />

	<mx:DateFormatter id="df" formatString="DD/MM/YYYY"/>
		
	<mx:Button x="532" y="63.7" label="{resourceManager.getString('MessagemResource_pt_BR', 'tela.button.pesquisa')}" icon="@Embed(source='../../../../img/button/search.png')" width="99.95" height="24" id="btBuscar" click="consultaProposta();" buttonMode="true" tabIndex="4" enabled="true" styleName="Button"/>
	
	<mx:Panel x="10" y="95.7" width="966" height="204.25" layout="absolute" title="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.title.lista')}" horizontalAlign="center">
		<mx:DataGrid id="grProposta" x="0" y="0" width="100%" height="100%" dataProvider="{listaProposta}" doubleClick="{detalharProposta()}" doubleClickEnabled="true" tabIndex="7" tabEnabled="false" sortableColumns="true" editable="false" change="changeRowSelected(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.numero')}" dataField="numero" width="80" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.loteamento')}" dataField="loteamento.nu_lotm" width="80" headerStyleName="CenterHeader" />
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.promitente')}" dataField="promitente.nome" headerStyleName="CenterHeader"/>
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.qtdeLote')}" width="100" dataField="lotes.length" headerStyleName="CenterHeader" textAlign="right" />
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.valorTotal')}" dataField="valorVista" width="100" textAlign="right" labelFunction="formatarValor" headerStyleName="CenterHeader" />
				<mx:DataGridColumn headerText="{resourceManager.getString('MessagemResource_pt_BR', 'tela.consulta.proposta.campo.grid.situacao')}" width="150" dataField="situacao" headerStyleName="CenterHeader" labelFunction="getDescricaoSituacao"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
	<mx:Button label="{resourceManager.getString('MessagemResource_pt_BR', 'tela.button.nova')}" id="btCadastrar" icon="@Embed(source='../../../../img/button/add.png')" x="10" y="312" width="99" buttonMode="true" tabIndex="8" enabled="true" styleName="Button" click="cadastrarProposta()"/>
	<mx:Button label="{resourceManager.getString('MessagemResource_pt_BR', 'tela.button.alterar')}" id="btAlterar" icon="@Embed('../../../../img/button/alter.png')" x="117" y="312" buttonMode="true" tabIndex="9" styleName="Button" width="99" enabled="false"/>
	<mx:Button label="{resourceManager.getString('MessagemResource_pt_BR', 'tela.button.cancelarProposta')}" enabled="false" id="btCancelarProposta" icon="@Embed('../../../../img/button/cancel.png')" x="331" y="312" buttonMode="true" tabIndex="11" styleName="Button" width="99" click="cancelarProposta()"/>
	<mx:Button label="Autorizar" enabled="false" id="btAutorizarProposta" icon="@Embed(source='../../../../img/button/10.png')" x="224" y="312" buttonMode="true" tabIndex="11" styleName="Button" width="99" click="autorizarProposta()"/>
	<mx:Label x="10" y="10" text="Loteamento:" width="82"/>
	<mx:Label x="10" y="38" text="Promitente:" width="82"/>
	<mx:TextInput x="84" y="36" width="66" toolTip="Código do Promitente" id="txCodigoPromitente" maxChars="5"/>
	<mx:TextInput x="155" y="36" width="320" toolTip="Nome do Promitente" editable="false" enabled="false" id="txNomePromitente"/>
	<mx:Button x="478" y="35" width="26" icon="@Embed(source='../../../../img/button/search.png')" id="btPesquisarPromitente" height="23" click="consultarPromitente()"/>
	<mx:ComboBox x="84" y="7" width="199" id="cbLoteamento" dataProvider="{listaLoteamento}" labelField="ds_lotm"></mx:ComboBox>
	<mx:Label x="10" y="68" text="Vendedor:" width="66"/>
	<mx:Label x="271" y="10" text="Situação:" width="82" textAlign="right"/>
	<mx:ComboBox x="361" y="7" width="143" id="cbSituacao" dataProvider="{listaSituacao}" labelField="descricao"/>
	<mx:ComboBox x="84" y="65" width="391" id="cbVendedor" dataProvider="{listaVendedor}" labelField="ds_razao_nome"></mx:ComboBox>

</mx:TitleWindow>
